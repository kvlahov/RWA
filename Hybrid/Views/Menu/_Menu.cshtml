@using Hybrid.Models

@model MenuViewModel

@{
    var userCalories = Convert.ToDouble(ViewBag.userCalories);
}

<style>
    tr {
        transition: background-color .4s ease;
        height: auto;
    }

    td {
        height: 45px;
    }

    tr.highlight {
        background-color: #abdb81;
        font-weight: bold;
    }
    .unit-of-mesurement {
        height: 100%;
    }
    .td-units {
        padding:0 !important;
    }
</style>

<h4>Target calories: <span class="label label-info">@userCalories</span></h4>
<div class="table-responsive">
    <table class="table table-bordered table-condensed">
        <thead class="thead-dark">
            <tr>
                <th scope="col">#</th>
                <th scope="col">Meal</th>
                <th scope="col">Ingredient</th>
                <th scope="col">Type</th>
                <th scope="col">Unit of Mesurement</th>
            </tr>
        </thead>
        @for (int i = 0; i < Model.Meals.Count; i++)
        {
            ViewBag.counter = i;
            <tbody>
                @Html.DisplayFor(m => m.Meals[i])
            </tbody>
        }

    </table>
</div>
<script>
    $('tbody tr').click(function (event) {
        if (event.target.type !== 'checkbox') {
            $(this).find(':checkbox').trigger('click');
        }
        else {
            $(this).trigger('change')
        }
        if ($(this).is('tr:first-of-type')) {
            let state = $(this).find(':checkbox').prop('checked');
            $(this).nextAll().find(':checkbox').prop('checked', state);
        }
        else {
            let count = 0;
            $(this).siblings('tr:not(:first-of-type)')
                .addBack()
                .each((index, el) => {
                    if ($(el).find(':checkbox').prop('checked')) count++;

                })
            if (count === 0 || count === 3) {
                $(this).siblings('tr:first-of-type')
                    .find(':checkbox').prop('checked', $(this).find(':checkbox').prop('checked'));
                $(this).siblings('tr:first-of-type')
                    .find(':checkbox').trigger('change');
            }
        }
    });

    $("input[type='checkbox']").change(function (e) {
        $(this).closest('tr').toggleClass("highlight", this.checked);

        if ($(this).closest('tr').is('tr:first-of-type')) {
            $(this).closest('tr').nextAll().toggleClass("highlight", this.checked);
        }
    });

    $('.unit-of-mesurement').css('max-width', 'none');
    $('.unit-of-mesurement').parent().addClass('td-units');
</script>